#!/bin/bash

# Welcome to the Kickstarter laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

set -e

cat > ~/.ksr_functions.sh <<-"EOF"
# Helpful functions for from the kickstarter
# laptop script

# Print a status message
print_status() {
  printf "%s ... " "$@"
}

# Print a check to complete the status message
print_done() {
  printf "✅ \n"
}

# Print a happy green message
succeed() {
  printf "\n$(tput bold)$(tput setaf 2)%s$(tput sgr0)" "$@"
  printf "\n❤️  💛  💚  💙  💜 \n"
}

# Print a red error
fail() {
  printf "\n\n$(tput bold)$(tput setaf 1)%s$(tput sgr0)\n" "$@"
}
EOF

source ~/.ksr_functions.sh

exit_message() {
  ret=$?
 if  [ $ret -ne 0 ]; then
   fail "Setup failed. 💔  " >&2
 fi
 exit $ret
}

# shellcheck disable=SC2154
trap exit_message EXIT

##
# Install XCode and XCode Command line tools
if [ ! -d /Applications/Xcode.app ]
then
  XCODE_URL='http://itunes.apple.com/us/app/xcode/id497799835'
  echo "Missing XCode. Install XCode from the Mac App Store:"
  echo $XCODE_URL
  open $XCODE_URL
  exit 1
fi

# need a way to check for this and automate:
# sudo xcodebuild -license

# XCode command-line tools
# From http://stackoverflow.com/a/15371967
while ! pkgutil --pkg-info=com.apple.pkg.CLTools_Executables > /dev/null; do

  if [ -z "$xcode_cli_installing" ]; then
    echo "Installing XCode command line tools."
    xcode-select --install
    echo "Waiting XCode command line tools..."
    xcode_cli_installing='yes'
  else
    sleep 1
  fi

done

##
# Install homebrew
if ! command -v brew >/dev/null; then
  print_status "Installing Homebrew"
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  print_done
fi

if brew list | grep -Fq brew-cask; then
  print_status "Uninstalling obsolete Homebrew-Cask"
  brew uninstall --force brew-cask
  print_done
fi

print_status "Checking Homebrew formulae"
brew bundle --file=- > /dev/null <<EOF
tap "homebrew/services"

brew "git"
brew "openssl"
brew "rbenv"
brew "ruby-build"
EOF
print_done

print_status "Initializing rbenv"
eval "$(rbenv init -)"
print_done

print_status "Checking Homebrew updater"
##
# Automatically run `brew update` every 2 hours
# This saves ~20 seconds on subsequent runs b/c we don't have to wait for `brew update`
cat > ~/Library/LaunchAgents/com.kickstarter.brew-updater.plist <<- EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>com.kickstarter.homebrew-updater</string>
    <key>ProgramArguments</key>
    <array>
    <string>/usr/local/bin/brew</string>
    <string>update</string>
    </array>

    <key>RunAtLoad</key>
    <true/>

    <key>StartInterval</key>
    <integer>7200</integer>
  </dict>
</plist>
EOF

launchctl unload ~/Library/LaunchAgents/com.kickstarter.brew-updater.plist 2> /dev/null
launchctl load   ~/Library/LaunchAgents/com.kickstarter.brew-updater.plist
print_done

##
# Install Pow web server
print_status "Checking Pow web server"
if  ! curl --fail -sH host:pow "127.0.0.1/status.json"  > /dev/null; then
  # Use custom install script until https://github.com/basecamp/pow/pull/505 is released
  # curl -s get.pow.cx | sh
  curl -s https://raw.githubusercontent.com/ktheory/pow/fix-launchctl-bootstrap/install.sh | sh
fi
print_done

##
# source ~/.ksr.rc from shell's rc file

cat > ~/.ksr.rc <<-"EOF"
# Kickstarter init commands provisioned by the laptop script.
# Changes will be overwritten.

# Initialize rbenv
eval "$(rbenv init -)"

if [[ ! "$PATH" =~ "/usr/local/bin" ]]; then
  export PATH="/usr/local/bin:$PATH"
fi
EOF

case $(basename "$SHELL") in
  bash )
    profile="$HOME/.bashrc"
    ;;
  zsh )
    profile="$HOME/.zshrc"
    ;;
  * )
    echo 'Unrecognized shell'
    ;;
  esac

cmd='if [ -e ~/.ksr.rc ]; then source ~/.ksr.rc; fi # Provisioned by ksr laptop script'
if ! grep -Fqs "$cmd" "$profile"; then
  print_status "Adding ~/.ksr.rc to $profile"
  printf "\n$cmd\n" >> "$profile"
  print_done
fi

print_status "Reticulating splines"
print_done
succeed "Laptop setup successful!"
